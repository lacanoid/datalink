#!/usr/bin/perl
# pg_datalinker - SQL/MED datalinker daemon
#
### BEGIN INIT INFO
# Provides:          pg_datalinker
# Required-Start:    postgresql $remote_fs $syslog $time
# Required-Stop:     postgresql $remote_fs $syslog $time
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: SQL/MED datalinker daemon
# Description:       pg_datalinker is a daemon and a tool
#                    to manage SQL/MED datalinks for Postgresql
### END INIT INFO

use strict;
use DBI;
use JSON;
#use IPC::Run 'run';
use Getopt::Std;
use Config::Tiny;
our $json = JSON->new->allow_nonref;


BEGIN { $ENV{LC_ALL} = "C"; }
#---------------------------------------

our $opt_v = 0;  # verbosity
our $opt_C = 0;  # only check configuration
our $opt_l;      # logfile
our $opt_e = 1;  # echo commands

our $version="0.18.20220618";
our $systemctl=`which systemctl`; chomp($systemctl);

getopt('l');

our $SERVICE = 'datalinker';
our $NAME = 'pg_datalinker';
our $DAEMON = "/usr/sbin/pg_datalinker";

#---------------------------------------
our %config = (
    dsn => 'dbi:Pg:service='.$SERVICE,
    prefix_file => "/etc/postgresql-common/pg_datalinker.prefix",
    service_file => "/etc/postgresql-common/pg_service.conf",
    prefix => ["/var/www/datalink/"]
);

our $has_bind=0;
our $services;
our $dbname='postgres';
our $port=5432;

services_load();

my $operation=shift @ARGV;
if($operation eq 'init') { config_init(); exit; }
config_load();
if($operation eq 'list') { config_list(); exit; }
if($operation eq 'add') { config_add(@ARGV[0]); exit; }
if($operation eq 'del') { config_del(@ARGV[0]); exit; }

if($operation eq 'usage') { show_usage(); exit; }
if($operation eq 'dirs') { show_dirs(); exit; }
if($operation eq 'show') { show_version(); exit; }
if($operation eq 'save') { save_dirs(); exit; }

if($operation eq 'bind') { config_bind(); exit; }
if($operation eq 'unbind') { config_unbind(); exit; }

if($operation eq 'start') { daemon_start(); exit; }
if($operation eq 'restart') { daemon_stop(); daemon_start(); exit; }
if($operation eq 'stop') { daemon_stop(); exit; }
if($operation eq 'status') { daemon_status(); exit; }
if($operation eq 'log') { daemon_log(); exit; }
if($operation eq 'ps') { daemon_see(); exit; }
if($operation eq 'see') { daemon_see(); exit; }

print STDERR qq{PostgreSQL datalink file manager control program
Usage: $0 <command> [arguments...]
Commands:
    show                 - show version and system configuration
    bind [dbname] [port] - bind file manager to a database
    unbind               - unbind file manager from a database

    list                 - list all registered file systems (directories)
    add <directory>      - register a file system (directory)
    del <directory>      - unregister a file system (directory)

    dirs                 - show directories
    usage                - show directory usage

    start                - starts the file manager
    stop                 - stop the file manager
    restart              - restart file manager
    status               - show file manager status
    ps                   - show the file manager processes running on the system
    log                  - monitor file manager log

};

my $future = qq{Possible future commands:
    add_db         - register a database
    add_prefix     - register a file system (directory)
    bind           - bind file manager to a database
    drop_dlm       - unregister a database
    create         - create datalink extension
    create_db      - create datalink database
    drop_db        - drop datalink database
    help           - help on commands
    list databases - list all registered databases
    list prefixes  - list all registered file systems (directories)
    refresh key    - refresh read access key
    retrieve       - display the status of files managed by the file manager
    setup          - creates the datalink database and extension
    shutdown       - shutdown the file manager cleanly
    startdbm       - starts the datalink database manager
    stopdbm        - stop the datalink database manager
};

exit 1;


#---------------------------------------

our $dbh;
our $dbmeta = {};
our %q;
our @err;

#---------------------------------------

sub main() {
    if($opt_l) {
        # redirect output to file
        open STDOUT, ">>", $opt_l or die "$0: open: $!";
        open STDERR, ">&STDOUT"   or die "$0: dup: $!";
    }

    $dbh = DBI->connect($config{dsn});
    if(!$dbh) { log_fatal("Database not available"); }


    $dbh->do("set application_name='$NAME'");
    $dbh->do("set search_path=datalink");
    $dbh->do('listen "datalink.linker_jobs"');

    #---------------------------------------

    %q = (
        'set_linked'=>$dbh->prepare(q{
         update dl_linked_files 
            set state = $2,
                info  = $3,
                err   = $4
          where path  = $1
				    })
	);
}

sub queryOrDie {
    my $query=shift @_;
    my @args=@_;
    my $rv=$q{$query}->execute(@args);
    if(!defined($rv)) {
        log_fatal("Can't execute '$query' query.\nMake sure datalink extension is installed.\n");
    }
    return $rv;
}

########################################
# configuration

use Data::Dumper;

sub config_bind() {
    if(defined($ARGV[0])) { $dbname=$ARGV[0]; shift @ARGV; }
    if(defined($ARGV[0])) { $port=$ARGV[0]; shift @ARGV; }
    if(!ref($services)) {
        $services = Config::Tiny->new({$SERVICE=>{dbname=>$dbname,port=>$port}});
    }
    if(!defined($services->{$SERVICE})) { $services->{$SERVICE}={}}
    $services->{$SERVICE}->{dbname}=$dbname;
    $services->{$SERVICE}->{port}=$port;
    services_save();
}

sub config_unbind() {
    delete($services->{$SERVICE});
    services_save();
    daemon_stop();
}

sub services_load() {
    $services = Config::Tiny->read($config{service_file});
    if(defined($services->{$SERVICE})) { $has_bind=1; } 
    else {
	$has_bind = 0;
	$services = Config::Tiny->new;
	$services->{$SERVICE} = {};
    }
}

sub services_save() {
    if(ref($services)) {
        $services->write($config{service_file});
    }
}

# load configuration
sub config_load {
    if($config{prefix_file}) {
        if(-r $config{prefix_file}) {
            my @l = file_get_lines($config{prefix_file});
            $config{prefix}=\@l;
        } else {
            log_fatal("No prefix file in $config{prefix_file}\nHINT:Did you run pg_datalinker init?");
        }
    } else { log_fatal("config.prefix_file not set"); }
    config_check();
}
# check if configuration is valid
sub config_check {
    my $p1 = [];
    for my $prefix (@{$config{prefix}}) {
        if($prefix) { push @$p1,$prefix; }
    }
    $config{prefix}=$p1;
}
# config list [refixes]
sub config_list {
    for my $prefix (@{$config{prefix}}) {
        print "$prefix\n";
    }
}
# config list [refixes]
sub config_save {
    if($config{prefix_file}) {
        my $data=join("\n",@{$config{prefix}});
        $data=~s|\n+|\n|g;
        file_put($config{prefix_file},$data);
    } else { log_fatal("config.prefix_file not set"); }
}
# config list [refixes]
sub config_observe {
    if($config{prefix_file}) {
        if(file_observe($config{prefix_file})) { 
            log_msg('CONFIGURE',$config{prefix_file});
            config_load(); 
        }
    } else { log_fatal("config.prefix_file not set"); }
}
# create inital system configuration if there is none
sub config_init {
    if(-f $config{prefix_file}) {
        log_err("FILE EXISTS","Config file ".$config{prefix_file}." exists.");
    } else {
        config_save();
    }
}
# create inital system configuration if there is none
sub config_add {
    my ($path)=@_;
    $path =~ s|/+$||; if(!$path) {return}; $path="$path/";
    if($path) {
        if(! -d $path) { log_err("NOT DIR","Not a directory:$path"); return; }
        for my $prefix (@{$config{prefix}}) {
            if($path eq $prefix) { log_err("PDUPE","Prefix already exists"); return; }
        }
        push @{$config{prefix}}, $path;
        config_save();
    }
}
# create inital system configuration if there is none
sub config_del {
    my ($path)=@_;
    $path =~ s|/+$||; if(!$path) {return}; $path="$path/";
    foreach my $i (0 .. $#{$config{prefix}}) {
        if($config{prefix}[$i] eq $path) {
            delete ${$config{prefix}}[$i];
            config_save();
        }
    }
}

########################################
# path management

sub path_backup {
    my ($path,$token)=@_;
    if($token) { return $path.'#'.$token; }
    else { return $path; }
}

sub path_valid_prefix {
    my ($path)=@_;
    my $prefix;
    for $prefix (@{$config{prefix}}) {
 	  if(rindex($path,$prefix,0)==0) { return 1 }
    }
    return 0
}

sub path_valid {
    return 1;
}

########################################
# file management

sub file_stat {
    my ($path,$opt)=@_;
    my (@s) = stat($path);

    return {
        'dev'=>$s[0],'inode'=>$s[1],'mode'=>$s[2],'nlink'=>$s[3],
        'uid'=>$s[4],'gid'=>$s[5], 'rdev'=>$s[6],'size'=>$s[7],
        'atime'=>$s[8],'mtime'=>$s[9],'ctime'=>$s[10],
        'blksize'=>$s[11],'blocks'=>$s[12]
    };
}
# read a file into string
sub file_get {
    my ($path)=@_;
    if(open(Fg,'<',$path)) {
        chomp(my @lines = <Fg>); close(Fg);
        return join("\n",@lines);
    } else {
        return undef;
    }
}
# read a file into lines
sub file_get_lines {
    my ($path)=@_;
    if(open(Fg,'<',$path)) {
        chomp(my @lines = <Fg>); close(Fg);
        return @lines;
    } else {
        log_err("CANT READ","Cannot read file:$path");
    }
}
# write a file
sub file_put {
    my ($path,$contents)=@_;

    my $path1=$path.".$$";
    if(open(Fp,'>',$path1)) {
        print Fp $contents; close(Fp);
        rename $path1,$path;
    } else {
        log_err("CANT WRITE","Cannot write to file:$path");
    }
}
# watch file for changes
our $file_stat = {};
sub file_observe {
    my ($path)=@_;
    my $stat=file_stat($path);
    my $old_mtime = $file_stat->{$path}->{mtime};
    my $new_mtime = $stat->{mtime};
    log_debug('OBSERVE',"$old_mtime,$new_mtime");
    $file_stat->{$path}=$stat;
    if(int($new_mtime)>int($old_mtime)) { return 1; }
    return 0;
}
########################################
# run sys commands

our $syserr;
our $sysex;

sub sys {
    my @args = @_;
    if($opt_e) { log_msg("SYS",[@args]); }
    $sysex = undef; $syserr=undef;
    system(@args);

    if ($? == -1) {
	    $syserr = "failed to execute: $!";
    }
    elsif ($? & 127) {
	    $syserr = sprintf "child died with signal %d, %s coredump",
	    ($? & 127),  ($? & 128) ? 'with' : 'without';
    }
    else {
    	my $ex = $? >> 8;
	    if($ex > 0) {
	        $syserr = sprintf "child exited with value %d", $ex;
	    }
        $sysex = $ex;
    }
    if($syserr) { log_err('SYSERR',"@args failed: $?"."\n".$syserr); }
}

########################################
# logging

sub log_debug {
    my ($txt,$data)=@_;
    if($opt_v) {
    	print "$txt:".(ref($data)?$json->pretty->encode($data):$data)."\n";
    }
}

sub log_msg {
    my ($txt,$data)=@_;
    print "$txt:".(ref($data)?$json->encode($data):$data)."\n";
}

sub log_err {
    my ($txt,$data)=@_;
    push @err,[$txt,$data];
    if($opt_e) {
        print STDERR "ERROR:$txt:".(ref($data)?$json->pretty->encode($data):$data)."\n";
    }
}

sub log_fatal {
    my ($txt,$data)=@_;
    print STDERR "FATAL:$txt\n";
    if($data) {
  	  print (ref($data)?$json->encode($data):$data)."\n";
    }
    die;
}

sub iso_timestamp {
  my ($time)=@_;
  my ($y,$m,$d,$hh24,$mi,$ss);
  if(defined($time)) {
    ($y,$m,$d,$hh24,$mi,$ss)=(gmtime($time))[5,4,3,2,1,0];
  } else {
    ($y,$m,$d,$hh24,$mi,$ss)=(gmtime)[5,4,3,2,1,0];
  }
  sprintf("%04d-%02d-%02dT%02d:%02d:%02dZ",1900+$y,$m+1,$d,$hh24,$mi,$ss);
}

########################################
# daemon stuff

our $DAEMON_LOG;
our $DAEMON_PID;
our $DAEMON_RUNNING=0;
our @DAEMON_ARGS;

sub daemon_setup {
#    $NAME=$config{appname};
#    $DAEMON = "/usr/sbin/pg_datalinker";
#    chomp($DAEMON);
    $DAEMON_LOG="/var/log/postgresql/$NAME.log";
    $DAEMON_PID="/var/run/postgresql/$NAME.pid";
}

sub daemon_start {
    $opt_e = 0;
    daemon_setup();
    daemon_stop();
    if($systemctl) {
        sys("systemctl","start",$NAME);
    } else {
        sys("start-stop-daemon","--start",
            "--name",$NAME,
            "--pidfile",$DAEMON_PID,"--make-pidfile",
            "--background","--no-close",
            "--exec","$DAEMON","--", 
            "-l",$DAEMON_LOG,"run");
    }
}

sub daemon_stop {
    $opt_e = 0;
    daemon_setup();
    if($systemctl) {
        sys("systemctl","stop",$NAME);
    } else {
        sys("start-stop-daemon","--stop",
            "--pidfile",$DAEMON_PID,"--remove-pidfile",
            "--name",$NAME);
    }
}

sub daemon_status {
    $opt_e = 0;
    daemon_setup();
    if($systemctl) {
        sys("systemctl","status",$NAME);
    } else {
        sys("start-stop-daemon","--status",
            "--pidfile",$DAEMON_PID,
            "--name",$NAME);
        if($sysex) { 
            $DAEMON_RUNNING = 0;
            log_msg('STOPPED');
        } else {
            $DAEMON_RUNNING = 1;
            log_msg('RUNNING');
        }
    }
}

sub daemon_log {
    $opt_e = 0;
    daemon_setup();
    if(-f $DAEMON_LOG) { sys("less","+F",$DAEMON_LOG); }
}

sub daemon_see {
    $opt_e = 0;
    sys("ps aux | grep pg_datalinker | grep -v grep");
}

########################################
# psql stuff

sub show_usage {
    $opt_e = 0;
    psql("select * from datalink.usage");
}

sub show_dirs {
    $opt_e = 0;
    psql("select * from datalink.directory");
}

sub save_dirs {
    $opt_e = 0;
    psql("copy datalink.dl_directory to '/tmp/dl_directory'");
    sys("mv","-f","/tmp/dl_directory","/etc/postgresql-common/");
}

sub show_version {
    $opt_e = 0;
    print "HAS_BIND=$has_bind\n";
    if($has_bind) {
        psql(qq{
              select current_setting('server_version') as server_version, 
                     current_database() as datname, 
                     user, 
                     current_setting('port') as port,
                     current_setting('cluster_name') as cluster_name
            });
        psql(qq{select extname,extowner::regrole, extversion,
                       (select count(*) from datalink.columns) as columns,
                       (select count(*) from datalink.linked_files) as files
                  from pg_extension where extname='datalink'});
        psql(qq{select pid,cpid,now()-atime as access,now()-mtime modify 
                  from datalink.dl_status where datalink.has_datalinker()
            });
    }
}

sub psql {
    my $q = shift;
    sys('psql','service='.$SERVICE,'-c',$q);
}

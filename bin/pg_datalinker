#!/usr/bin/perl
# pg_datalinker - SQL/MED datalinker daemon
# version 0.23 by lacanoid@ljudmila.org

our $version="0.23.20240302";
our $lockid=0x41444154494c4b4e; # DATALINK as ASCII

use strict;
use DBI;
use JSON;
use IPC::Run 'run';
use Getopt::Std;
use Time::HiRes qw{usleep};
our $json = JSON->new->allow_nonref;

BEGIN { $ENV{LC_ALL} = "C"; }
#---------------------------------------

our $opt_v = 0;  # verbosity
our $opt_D = 1;  # really delete linked files with ON UNLINK DELETE
our $opt_O = 0;  # for read_access='DB' set linked file owner to relowner if possible
our $opt_R = 1;  # restore old files from backups
our $opt_A = 1;  # process dl_admin_files (autodelete files from aborted transactions)
our $opt_L = 1;  # use advisory locks (support for datalink.commit())
our $opt_C = 0;  # only check configuration
our $opt_n = 20; # number of iterations in fast inner loop
our $opt_l;      # logfile
our $opt_r = 10; # when fatal error wait this long then restarts
our $opt_e = 1;  # echo commands
our $macOS = 0;  # running on macOS

getopt('l');

#---------------------------------------

our %config = (
    appname => 'pg_datalinker',
    dsn => 'dbi:Pg:service=pg_datalink',
    group => 'www-data',
    owner => 'postgres',
    db_mode => '0440',
    prefix_file => "/etc/postgresql-common/pg_datalinker.prefix",
    prefix => ["/var/www/datalink/"]
);

my ($operation)=@ARGV;
if($operation eq 'init') { config_init(); exit; }
config_load();
if($operation eq 'list') { config_list(); exit; }

if($operation eq 'run') { main(); exit; }

print STDERR qq{Usage: $0 <command> [arguments...]
Commands:
    list   - list volumes
    run    - run datalinker interactively
};

exit 1;


#---------------------------------------

our @wget = qw{wget --verbose --adjust-extension --span-hosts --convert-links --backup-converted --page-requisites};
our $dbh;
our $dbmeta = {};
our %q;
our @err;

#---------------------------------------

sub main() {
    if($opt_l) {
        # redirect output to file
        open STDOUT, ">>", $opt_l or die "$0: open: $!";
        open STDERR, ">&STDOUT"   or die "$0: dup: $!";
    }

    $dbh = DBI->connect($config{dsn});
    if(!$dbh) { log_fatal("Database not available"); }


    $dbh->do("set application_name='".$config{appname}."'");
    $dbh->do("set search_path=datalink");
    $dbh->do('listen "datalink.linker_jobs"');
    $dbh->do("update datalink.dl_status set pid=default,version='$version',cpid='$$'");

    #---------------------------------------

    %q = (
        'jobs_get'=>$dbh->prepare(q{
          select lf.*,lco.*,c.relowner::regrole::text as relowner 
            from dl_linked_files lf join link_control_options lco using (lco)
            left join pg_class c on c.oid=lf.attrelid
           where state in ('LINK','UNLINK')
           order by txid for update of lf
        }),
        'job_set'=>$dbh->prepare(q{
          update dl_linked_files set state = $2, info  = $3, err   = $4
           where path  = $1
        }),
        'job_delete'=>$dbh->prepare(q{ delete from dl_linked_files where path = $1 }),

        'mtime'=>$dbh->prepare(q{
            update dl_status set mtime=now(), links = links + $1, unlinks = unlinks + $2
        }),

        'admin_get'=>$dbh->prepare(q{
          select pg_xact_status(txid) as state, op, path 
            from dl_admin_files af
           where pg_xact_status(txid) is distinct from 'in progress'
           order by txid for update of af
        }),
        'admin_delete'=>$dbh->prepare(q{ delete from dl_admin_files where path = $1 })
    );

    #---------------------------------------

    log_msg("VERSION",$version);

    $dbmeta = $dbh->selectrow_hashref(qq{
     select current_database() as datname,
            (select setting from pg_settings where name='port') as port, 
     	    (select extversion from pg_extension where extname='datalink') as extversion,
            current_timestamp as start,
            (select count(*) from pg_stat_activity
             where application_name='$config{appname}') as nl,
            version()
    });
    
    log_msg("START",$dbmeta);

    if($dbmeta->{nl}>1) {
        log_fatal("SYSDUP","There seems to be a datalinker already running!");
    }

    #---------------------------------------

    if($opt_L) { $dbh->do("select pg_advisory_lock($lockid)"); }
    while(1) {
        log_debug('READY');
        config_observe();
        my $sleepy = 0;
	    my $cl = 0; my $cu = 0; # link/unlink counters
        while(!$sleepy) {
            my $rv = queryOrDie('jobs_get');
            $sleepy = $rv<=0;
            if(!$sleepy) {
                while(my $data = $q{jobs_get}->fetchrow_hashref) {
                    if(!$data->{path}) { 
                        log_err("INPUT","No path in ",$data); next; 
                    }
                    if(!$data->{token}) { 
                        log_err("INPUT","No token in ",$data); next; 
                    }

                    my $path = $data->{path}; 
                    my $path_backup = path_backup($data->{path},$data->{token});

                    if(!path_valid_prefix($path)) { 
                        log_err("PREFIX",sprintf("Bad path prefix in '$path'")); 
                        queryOrDie('job_set',$path,'ERROR',undef,'[{"code":"PREFIX"}]');
                        next; 
                    }
                    @err=();
                    my $info;
                    if($data->{info}) { $info=$data->{info}=$json->decode($data->{info}); }
                    log_debug("DATA",$data);
                    my $ts=iso_timestamp();
                    if($data->{state} eq 'LINK') {
                        if($info) {
                            log_msg("RE-LINK:$ts".$data->{lco},$path_backup);
			    $info->{del}=0;
                            file_unlink($path,$data); $cu++;
                        } else {
                            log_msg("LINK:$ts:".$data->{lco},$path_backup);
                        }
                        my $r=file_link($path,$data); $cl++;
                        my $err=(@err)?to_json(\@err):undef;
                        queryOrDie('job_set',$path,$err?'ERROR':'LINKED',$json->encode($r),$err);
                        next;
                    }
                    elsif($data->{state} eq 'UNLINK') {
                        log_msg("UNLINK:$ts:".$data->{lco},$path_backup);
                        file_unlink($path,$data); $cu++;
                        queryOrDie('job_delete',$path);
                        next;
                    }
                    else {
                        log_err("STATE","Unknown state in ",$data);
                        next;
                    } 
                } # while fetchrow
                queryOrDie('mtime',$cl,$cu);
            } # if not sleepy
        } # while not sleepy

        process_admin(); # process dl_admin_files

        if($opt_L) { # this is to make datalink.commit() work
            $dbh->do("select pg_advisory_unlock($lockid)");
            $dbh->do("select pg_advisory_lock($lockid)");  }

        if($sleepy) {
            log_debug('IDLE');
            for(my $i=0;$i<$opt_n;$i++) {
                while(my $not = $dbh->pg_notifies) {
                    log_debug('NOTIFY',$not);
                    $sleepy = 0;
                }
                if(!$sleepy) { next; }
                else {
                    usleep(1000000 * 5.0/$opt_n);
                } 
            }
        }
        $dbh->do("update datalink.dl_status set atime=now()");
    } # forever loop

    if($opt_L) { $dbh->do("select pg_advisory_unlock($lockid)"); }

    log_msg('END');
}

########################################
# process entries in dl_admin_files
# 1. delete files created in aborted transactions

sub process_admin {
    my $rv = queryOrDie('admin_get');
    while(my $data = $q{admin_get}->fetchrow_hashref) {
        my $path = $data->{path}; 
        if(path_valid_prefix($path)) {
            my $state = $data->{state};
            my $op = $data->{op};
            if($state eq 'in progress') { next; } 
            my $stat = file_stat($path);
            if($stat->{inode}) {
                if($stat->{owner} eq $config{owner}) {
                    log_msg('PURGE',"$op,$state,$path");
                    if($state eq 'aborted' || ($state eq 'committed' && $op eq 't')) {
			file_remove($path);
		    }
                } else { 
                    log_err("BAD OWNER","File '$path' is not owned by '$config{owner}'.");
                }
            } else { 
                # log_err("FILE DOES NOT EXISTS","File '$path' does not exist.");
            }
        } 
        queryOrDie('admin_delete',$path);
    }
}

########################################

sub queryOrDie {
    my $query=shift @_;
    my @args=@_;
    my $rv=$q{$query}->execute(@args);
    if(!defined($rv)) {
        log_fatal("Can't execute '$query' query.\nHINT: Make sure datalink extension is installed.\n");
    }
    return $rv;
}

########################################
# configuration

# load configuration
sub config_load {
    if($config{prefix_file}) {
        if(-r $config{prefix_file}) {
            my @l = file_get_lines($config{prefix_file});
            $config{prefix}=\@l;
        } else {
            log_fatal("No prefix file in $config{prefix_file}\nHINT:Did you run pg_datalinker init?");
        }
    } else { log_fatal("config.prefix_file not set"); }
    config_check();
}
# check if configuration is valid
sub config_check {
    my $p1 = [];
    for my $prefix (@{$config{prefix}}) {
        if($prefix) { push @$p1,$prefix; }
    }
    $config{prefix}=$p1;
}
# config list [refixes]
sub config_list {
    for my $prefix (@{$config{prefix}}) {
        print "$prefix\n";
    }
}
# config list [refixes]
sub config_observe {
    if($config{prefix_file}) {
        if(file_observe($config{prefix_file})) { 
            log_msg('CONFIGURE',$config{prefix_file});
            config_load(); 
        }
    } else { log_fatal("config.prefix_file not set"); }
}
# create inital system configuration if there is none
sub config_init {
    if(-f $config{prefix_file}) {
        log_err("FILE EXISTS","Config file ".$config{prefix_file}." exists.");
    }
}

########################################
# path management

sub path_backup {
    my ($path,$token)=@_;
    if($token) { return $path.'#'.$token; }
    else { return $path; }
}

sub path_valid_prefix {
    my ($path)=@_;
    my $prefix;
    for $prefix (@{$config{prefix}}) {
       if(rindex($path,$prefix,0)==0) { return 1 }
    }
    return 0
}

sub path_valid {
    return 1;
}

########################################
# file management

sub file_stat {
    my ($path,$opt)=@_;
    my (@s) = stat($path);

    return {
        'dev'=>$s[0],'inode'=>$s[1],'mode'=>$s[2],'nlink'=>$s[3],
        'uid'=>$s[4],'gid'=>$s[5], 'rdev'=>$s[6],'size'=>$s[7],
        'atime'=>$s[8],'mtime'=>$s[9],'ctime'=>$s[10],
        'blksize'=>$s[11],'blocks'=>$s[12],
        'owner'=>getpwuid($s[4]),'group'=>getgrgid($s[5])
    };
}
# link file to sql environment
sub file_link {
    my ($path,$opt)=@_;
    $path =~ s|/+$||;
    my $path1 = $path; # backup path
    my $have = 0;      # have base file
    my $s = file_stat($path,$opt);
    if($s->{inode}) { $have=1; }
    else {
        $path1 = path_backup($path,$opt->{token});
        $s = file_stat($path1,$opt);
    }
    if(!$s->{inode}) {
        log_err("NO STAT",$path);
        return undef;
    }

#    if($opt->{read_access} eq 'DB') {
#        file_read_access_db($path1,$opt);
#    }

    if(file_has_backup($path,$opt)) {
	if(!$have || $opt->{recovery} eq 'YES' ||
	   $opt->{write_access} eq 'ADMIN' ||
	   $opt->{write_access} eq 'TOKEN') {
	    file_backup_restore($path,$opt);
	}
	if($opt->{read_access} eq 'DB') { file_read_access_db($path,$opt); }
    } else {
	if($opt->{read_access} eq 'DB') { file_read_access_db($path,$opt); }
	if($opt->{recovery} eq 'YES') { file_backup($path,$opt); }
    } 
    
    my $r = { own => $s->{uid}.":".$s->{gid}, 
              mod => sprintf("%#o",$s->{mode} & 07777),
              lco => $opt->{lco},
              token => $opt->{token},
              del => ($opt->{on_unlink} eq 'DELETE'),
              addr => '{'.$s->{dev}.','.$s->{inode}.'}'
    };

    if($opt->{write_access} ne 'FS') {
        file_block($path);
    }

    return $r;
}
# unlink file from sql environment
sub file_unlink {
    my ($path,$opt)=@_;
    if($opt->{write_access} ne 'FS') {
        file_unblock($path,$opt);
    }
#    if($opt->{on_unlink} eq 'DELETE') {
    if($opt->{info} && $opt->{info}{del}) {
        file_delete($path,$opt);
    }
    if($opt->{read_access} eq 'DB') {
	if(-f $path) { file_restore($path,$opt); }
    }
}
# set file permissions for read_access db
sub file_read_access_db {
    my ($path,$opt)=@_;
    log_debug('CHOWNMOD',$opt);
    if(defined($config{owner})) {
        if(defined($config{group})) {
            sys("chown",$config{owner}.':'.$config{group},$path);
        } else {
            sys("chown",$config{owner},$path);
        }
    }
    if($opt->{relowner}) {
        my ($name, $pass, $uid, $gid, $quota, $comment, $gcos, $dir, $shell, $expire) = getpwnam($opt->{relowner});
        if($name && $opt_O) {
            sys("chown",$name,$path);
        }
    }
    if(defined($config{db_mode})) {
        sys("chmod",$config{db_mode},$path);
    }
}

sub file_restore {
    my ($path,$opt)=@_;
    my $info = $opt->{info};
    log_debug('RESTOR',$opt);
    if($info) {
        if(defined($info->{own})) {
            sys("chown",$info->{own},$path);
        }
        if(defined($info->{mod})) {
            sys("chmod",$info->{mod},$path);
        }
    }
}

sub file_remove {
    my ($path,$opt)=@_;
    if(!$opt_D) {
	log_msg('NO DELETE',"Refusing to delete '$path'. HINT: use -D datalinker option.");
	return;
    }
    if($opt) { log_msg('DELETE',$path); }
    my $s = file_stat($path);
    if(!($s->{owner} eq $config{owner})) {
	log_err("BAD OWNER","File '$path' is not owned by '$config{owner}'.");
	return;
    }
    unlink($path);
#    sys('rm',$path);
}

sub file_delete {
    my ($path,$opt)=@_;
    my $info = $opt->{info};
    if($info && $info->{del}) {
	if(!($opt->{on_unlink} eq 'DELETE')) {
	    log_err('NO DELETE',"Not ON UNLINK DELETE");
	    return;
	}
	if(defined($info->{own})) { file_remove($path,$opt); }
    }
}
# does file have a backup copy
sub file_has_backup {
    my ($path,$opt)=@_;
    my $path_backup = path_backup($path,$opt->{token});
    return -f $path_backup;
}
# backup a file
sub file_backup {
    my ($path,$opt)=@_;
    if($opt->{token}) {
        my $path_backup = path_backup($path,$opt->{token});
        log_msg('BACKUP',$path_backup);
        if(-f $path_backup) {
            log_err("COPY EXISTS","File exists:$path_backup");
        } else {
            sys("cp","-a",$path,$path_backup);
        }
    }
}
# revert a file to previous version from backup
sub file_backup_restore {
    my ($path,$opt)=@_;
    my $move = !($opt->{recovery} eq 'YES');
     if($opt->{token}) {
	 my $path_backup = path_backup($path,$opt->{token});
	 if(-f $path && !$opt_R) {
	     log_err("NO RESTORE","Restore disabled: HINT: use option -R");
	     return;
	 }
	 if(-f $path_backup) {
	     if($move) {
		 log_msg('REPLACE',$path_backup);
		 sys("mv","-f",$path_backup,$path);
	     }
	     else {
		 log_msg('RESTORE',$path_backup);
		 sys("ln","-f",$path_backup,$path);
	     }
	 } else {
	     log_err("NO BACKUP","File not found:$path_backup");
	 }
     }
}
# block file for writing
sub file_block {
    my ($path,$opt)=@_;
    if($macOS) { sys("chflags","schg",$path); } 
    else { sys("chattr","+i",$path); }
}
# unblock file for writing
sub file_unblock {
    my ($path,$opt)=@_;
    if($macOS) { sys("chflags","noschg",$path); } 
    else { sys("chattr","-i",$path); }
}
# read a file into lines
sub file_get_lines {
    my ($path)=@_;
    if(open(Fg,'<',$path)) {
        chomp(my @lines = <Fg>); close(Fg);
        return @lines;
    } 
    else { log_err("CANT READ","Cannot read file:$path"); }
}
# watch file for changes
our $file_stat = {};
sub file_observe {
    my ($path)=@_;
    my $stat=file_stat($path);
    my $old_mtime = $file_stat->{$path}->{mtime};
    my $new_mtime = $stat->{mtime};
    log_debug('OBSERVE',"$old_mtime,$new_mtime");
    $file_stat->{$path}=$stat;
    if(int($new_mtime)>int($old_mtime)) { return 1; }
    return 0;
}
########################################
# run sys commands

our $syserr;
our $sysex;

sub sys {
    my @args = @_;
    if($opt_e) { log_msg("SYS",[@args]); }
    $sysex = undef; $syserr=undef;
    system(@args);

    if ($? == -1) {
        $syserr = "failed to execute: $!";
    }
    elsif ($? & 127) {
        $syserr = sprintf "child died with signal %d, %s coredump",
        ($? & 127),  ($? & 128) ? 'with' : 'without';
    }
    else {
        my $ex = $? >> 8;
        if($ex > 0) {
            $syserr = sprintf "child exited with value %d", $ex;
        }
        $sysex = $ex;
    }
    if($?) { log_err('SYSERR',"@args failed: $?"."; ".$syserr); }
}

########################################
# run wget to arhive webpages (not used yet)

sub wget {
    my ($u)=@_;
    my @c = @wget;
    push @c,$u;

    my $start_time = [Time::HiRes::gettimeofday()];

    chdir($config{url_archive});
    run [ @c ], '2>', \my $res;

    my %rc;
    while($res=~s/response\.\.\.\s*(\d+)//) {
    $rc{$1}++;
    }

    my $diff = Time::HiRes::tv_interval($start_time);

    return {'t'=>$diff, 'rc'=>\%rc };
}

########################################
# logging

sub log_debug {
    my ($txt,$data)=@_;
    if($opt_v) {
        print "$txt:".(ref($data)?$json->pretty->encode($data):$data)."\n";
    }
}

sub log_msg {
    my ($txt,$data)=@_;
    print "$txt:".(ref($data)?$json->encode($data):$data)."\n";
}

sub log_err {
    my ($txt,$data)=@_;
    push @err,[$txt,$data];
    if($opt_e) {
        print STDERR "ERROR:$txt:".(ref($data)?$json->pretty->encode($data):$data)."\n";
    }
}

sub log_fatal {
    my ($txt,$data)=@_;
    print STDERR "FATAL:$txt\n";
    if ($DBI::err) {
        print STDERR "DBI-ERROR:".$DBI::err.":".$DBI::errstr."\n";
    }
    if($data) {
        print (ref($data)?$json->encode($data):$data)."\n";
    }
    if($opt_r) {
        print STDERR "RESTART:\n";
        sleep $opt_r;
        exec($^X, $0, @ARGV); # restart
    }
    die;
}

########################################

sub iso_timestamp {
  my ($time)=@_;
  my ($y,$m,$d,$hh24,$mi,$ss);
  if(defined($time)) {
    ($y,$m,$d,$hh24,$mi,$ss)=(gmtime($time))[5,4,3,2,1,0];
  } else {
    ($y,$m,$d,$hh24,$mi,$ss)=(gmtime)[5,4,3,2,1,0];
  }
  sprintf("%04d-%02d-%02dT%02d:%02d:%02dZ",1900+$y,$m+1,$d,$hh24,$mi,$ss);
}

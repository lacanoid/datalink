\pset null _null_
SET client_min_messages = notice;
SET search_path = public,datalink;
create table sample_datalinks4 (
  id serial,
  link datalink
);
-- select dl_chattr('sample_datalinks4','link', dl_lco(link_control=>'FILE',integrity=>'ALL'));
update datalink.columns
   set link_control='FILE', integrity='ALL'
 where table_name='sample_datalinks4' and column_name='link';
NOTICE:  DATALINK DDL:TRIGGER on sample_datalinks4
insert into sample_datalinks4 (link)
values (dlvalue('/etc/passwd','FS','Sample file datalink 1'));
NOTICE:  DATALINK LINK:/etc/passwd
ERROR:  DATALINK EXCEPTION - referenced file not valid
DETAIL:  unknown path prefix for "/etc/passwd"
HINT:  run "pg_datalinker add" to add prefixes
CONTEXT:  PL/pgSQL function dl_file_link(file_path,dl_token,"char",dl_lco,regclass,name) line 15 at RAISE
SQL statement "SELECT datalink.dl_file_link(dlurlpathonly(link),(link::jsonb->>'b')::datalink.dl_token,cons,link_options,regclass,column_name)"
PL/pgSQL function dl_datalink_ref(datalink,dl_lco,regclass,name) line 68 at PERFORM
PL/pgSQL function dl_trigger_table() line 94 at assignment
insert into sample_datalinks4 (link)
values (dlvalue('/var/www/datalink/test1.txt','FS','Sample file datalink 2'));
NOTICE:  DATALINK LINK:/var/www/datalink/test1.txt
insert into sample_datalinks4 (link)
values (dlvalue('/var/www/datalink/test3.txt','FS','Sample file datalink 3'));
ERROR:  DATALINK EXCEPTION - referenced file does not exist
URL:  file:///var/www/datalink/test3.txt
DETAIL:  CURL error 37 - Couldn't read a file:// file
HINT:  make sure url is correct and referenced file actually exists
CONTEXT:  PL/pgSQL function dl_datalink_ref(datalink,dl_lco,regclass,name) line 45 at RAISE
PL/pgSQL function dl_trigger_table() line 94 at assignment
insert into sample_datalinks4 (link)
values (dlvalue('/var/www/datalink/test3.txt#11111111-2222-3333-4444-abecedabeced','FS','Sample file datalink 3b'));
NOTICE:  DATALINK LINK:/var/www/datalink/test3.txt
insert into sample_datalinks4 (link)
values (dlvalue('/etc/hosts','FS','Sample file datalink 4'));
NOTICE:  DATALINK LINK:/etc/hosts
ERROR:  DATALINK EXCEPTION - referenced file not valid
DETAIL:  unknown path prefix for "/etc/hosts"
HINT:  run "pg_datalinker add" to add prefixes
CONTEXT:  PL/pgSQL function dl_file_link(file_path,dl_token,"char",dl_lco,regclass,name) line 15 at RAISE
SQL statement "SELECT datalink.dl_file_link(dlurlpathonly(link),(link::jsonb->>'b')::datalink.dl_token,cons,link_options,regclass,column_name)"
PL/pgSQL function dl_datalink_ref(datalink,dl_lco,regclass,name) line 68 at PERFORM
PL/pgSQL function dl_trigger_table() line 94 at assignment
insert into sample_datalinks4 (link)
values (dlvalue('/var/www/datalink/test2.txt','FS','Sample file datalink 4'));
NOTICE:  DATALINK LINK:/var/www/datalink/test2.txt
insert into sample_datalinks3 (url,link) select dlurlcompleteonly(link),link from sample_datalinks4;
select state,regclass,attname,path
  from datalink.linked_files;
 state |     regclass      | attname |            path             
-------+-------------------+---------+-----------------------------
 LINK  | sample_datalinks4 | link    | /var/www/datalink/test2.txt
 LINK  | sample_datalinks4 | link    | /var/www/datalink/test3.txt
 LINK  | sample_datalinks4 | link    | /var/www/datalink/test1.txt
(3 rows)

delete from sample_datalinks4
 where link::jsonb->>'b' =
(select token::text
  from datalink.dl_linked_files
 order by txid limit 1);
NOTICE:  DATALINK UNLINK:/var/www/datalink/test1.txt
select state,regclass,attname,path
  from datalink.linked_files;
 state |     regclass      | attname |            path             
-------+-------------------+---------+-----------------------------
 LINK  | sample_datalinks4 | link    | /var/www/datalink/test2.txt
 LINK  | sample_datalinks4 | link    | /var/www/datalink/test3.txt
(2 rows)

create table sample_datalinks5 (
  id serial,
  link datalink
);
-- select dl_chattr('sample_datalinks5','link', dl_lco(link_control=>'FILE',integrity=>'ALL'));
update datalink.columns
   set link_control='FILE', integrity='ALL'
 where table_name='sample_datalinks5' and column_name='link';
NOTICE:  DATALINK DDL:TRIGGER on sample_datalinks5
insert into sample_datalinks5 (link)
values (dlvalue('/etc/passwd','FS','Sample file datalink'));
NOTICE:  DATALINK LINK:/etc/passwd
ERROR:  DATALINK EXCEPTION - referenced file not valid
DETAIL:  unknown path prefix for "/etc/passwd"
HINT:  run "pg_datalinker add" to add prefixes
CONTEXT:  PL/pgSQL function dl_file_link(file_path,dl_token,"char",dl_lco,regclass,name) line 15 at RAISE
SQL statement "SELECT datalink.dl_file_link(dlurlpathonly(link),(link::jsonb->>'b')::datalink.dl_token,cons,link_options,regclass,column_name)"
PL/pgSQL function dl_datalink_ref(datalink,dl_lco,regclass,name) line 68 at PERFORM
PL/pgSQL function dl_trigger_table() line 94 at assignment
insert into sample_datalinks5 (link)
values (dlvalue('/var/www/datalink/test1.txt','FS','Sample file datalink'));
NOTICE:  DATALINK LINK:/var/www/datalink/test1.txt
select state,regclass,attname,path
  from datalink.linked_files order by path;
 state |     regclass      | attname |            path             
-------+-------------------+---------+-----------------------------
 LINK  | sample_datalinks5 | link    | /var/www/datalink/test1.txt
 LINK  | sample_datalinks4 | link    | /var/www/datalink/test2.txt
 LINK  | sample_datalinks4 | link    | /var/www/datalink/test3.txt
(3 rows)

drop table sample_datalinks5;
NOTICE:  DATALINK UNLINK:/var/www/datalink/test1.txt
truncate sample_datalinks4;
NOTICE:  DATALINK UNLINK:/var/www/datalink/test3.txt
NOTICE:  DATALINK UNLINK:/var/www/datalink/test2.txt
insert into sample_datalinks4 (link)
select link
  from sample_datalinks3
 where dllinktype(link)='FS';
NOTICE:  DATALINK LINK:/var/www/datalink/test1.txt
NOTICE:  DATALINK LINK:/var/www/datalink/test3.txt
NOTICE:  DATALINK LINK:/var/www/datalink/test2.txt
alter table sample_datalinks4
 drop column link;
NOTICE:  DATALINK UNLINK:/var/www/datalink/test1.txt
NOTICE:  DATALINK UNLINK:/var/www/datalink/test3.txt
NOTICE:  DATALINK UNLINK:/var/www/datalink/test2.txt
truncate sample_datalinks4;
alter table sample_datalinks4
 add column link datalink;
NOTICE:  DATALINK DDL:TRIGGER on sample_datalinks4
alter table sample_datalinks4
 add column link2 datalink;
-- select dl_chattr('sample_datalinks4','link2',dl_lco(link_control=>'FILE',integrity=>'ALL'));
update datalink.columns
   set link_control='FILE', integrity='ALL'
 where table_name='sample_datalinks4' and column_name='link2';
NOTICE:  DATALINK DDL:TRIGGER on sample_datalinks4
insert into sample_datalinks4 (link)
select link
  from sample_datalinks3
 where dllinktype(link)='FS';
update sample_datalinks4 set link2 = link;
NOTICE:  DATALINK LINK:/var/www/datalink/test1.txt
NOTICE:  DATALINK LINK:/var/www/datalink/test3.txt
NOTICE:  DATALINK LINK:/var/www/datalink/test2.txt
update sample_datalinks4 set link = link2;
update sample_datalinks4 set link2 = null;
NOTICE:  DATALINK UNLINK:/var/www/datalink/test1.txt
NOTICE:  DATALINK UNLINK:/var/www/datalink/test3.txt
NOTICE:  DATALINK UNLINK:/var/www/datalink/test2.txt
update datalink.columns
   set link_control='FILE', integrity='SELECTIVE', recovery='YES'
 where table_name='sample_datalinks4' and column_name='link2';
ERROR:  DATALINK EXCEPTION
DETAIL:  Invalid link control options (101)
HINT:  see table datalink.link_control_options for valid link control options
CONTEXT:  PL/pgSQL function modlco(regclass,name,dl_lco) line 30 at RAISE
SQL statement "SELECT datalink.modlco(regclass(old.table_name),old.column_name,my_lco)"
PL/pgSQL function dl_trigger_columns() line 25 at PERFORM
select * from columns;
        table_name         | column_name | link_control | integrity | read_access | write_access | recovery | on_unlink 
---------------------------+-------------+--------------+-----------+-------------+--------------+----------+-----------
 dl_directory              | dirlink     | FILE         | ALL       | FS          | FS           | NO       | NONE
 datalink.sample_datalinks | link        | FILE         | SELECTIVE | FS          | FS           | NO       | NONE
 efiles0                   | file        | NO           | NONE      | FS          | FS           | NO       | NONE
 efiles1                   | file        | FILE         | SELECTIVE | FS          | FS           | NO       | NONE
 efiles2                   | file        | FILE         | ALL       | FS          | FS           | NO       | NONE
 sample_datalinks          | link        | NO           | NONE      | FS          | FS           | NO       | NONE
 sample_datalinks2         | link        | FILE         | SELECTIVE | FS          | FS           | NO       | NONE
 sample_datalinks3         | link        | NO           | NONE      | FS          | FS           | NO       | NONE
 sample_datalinks4         | link        | NO           | NONE      | FS          | FS           | NO       | NONE
 sample_datalinks4         | link2       | FILE         | ALL       | FS          | FS           | NO       | NONE
(10 rows)

alter table sample_datalinks4 rename link2 to link3;
select * from columns where table_name='sample_datalinks4';
    table_name     | column_name | link_control | integrity | read_access | write_access | recovery | on_unlink 
-------------------+-------------+--------------+-----------+-------------+--------------+----------+-----------
 sample_datalinks4 | link        | NO           | NONE      | FS          | FS           | NO       | NONE
 sample_datalinks4 | link3       | FILE         | ALL       | FS          | FS           | NO       | NONE
(2 rows)

update sample_datalinks4 set link3 = link;
NOTICE:  DATALINK LINK:/var/www/datalink/test1.txt
NOTICE:  DATALINK LINK:/var/www/datalink/test3.txt
NOTICE:  DATALINK LINK:/var/www/datalink/test2.txt
select path,state,read_access,write_access,recovery,on_unlink,regclass,attname,err from datalink.linked_files where regclass='sample_datalinks4'::regclass;
            path             | state | read_access | write_access | recovery | on_unlink |     regclass      | attname |  err   
-----------------------------+-------+-------------+--------------+----------+-----------+-------------------+---------+--------
 /var/www/datalink/test1.txt | LINK  | FS          | FS           | NO       | NONE      | sample_datalinks4 | link3   | _null_
 /var/www/datalink/test3.txt | LINK  | FS          | FS           | NO       | NONE      | sample_datalinks4 | link3   | _null_
 /var/www/datalink/test2.txt | LINK  | FS          | FS           | NO       | NONE      | sample_datalinks4 | link3   | _null_
(3 rows)

alter table sample_datalinks4 rename link3 to link4;
select * from columns where table_name='sample_datalinks4';
    table_name     | column_name | link_control | integrity | read_access | write_access | recovery | on_unlink 
-------------------+-------------+--------------+-----------+-------------+--------------+----------+-----------
 sample_datalinks4 | link        | NO           | NONE      | FS          | FS           | NO       | NONE
 sample_datalinks4 | link4       | FILE         | ALL       | FS          | FS           | NO       | NONE
(2 rows)

select path,state,read_access,write_access,recovery,on_unlink,regclass,attname,err from datalink.linked_files where regclass='sample_datalinks4'::regclass;
            path             | state | read_access | write_access | recovery | on_unlink |     regclass      | attname |  err   
-----------------------------+-------+-------------+--------------+----------+-----------+-------------------+---------+--------
 /var/www/datalink/test1.txt | LINK  | FS          | FS           | NO       | NONE      | sample_datalinks4 | link4   | _null_
 /var/www/datalink/test3.txt | LINK  | FS          | FS           | NO       | NONE      | sample_datalinks4 | link4   | _null_
 /var/www/datalink/test2.txt | LINK  | FS          | FS           | NO       | NONE      | sample_datalinks4 | link4   | _null_
(3 rows)

alter table sample_datalinks4 drop column link4;
NOTICE:  DATALINK UNLINK:/var/www/datalink/test1.txt
NOTICE:  DATALINK UNLINK:/var/www/datalink/test3.txt
NOTICE:  DATALINK UNLINK:/var/www/datalink/test2.txt
NOTICE:  DATALINK DDL:TRIGGER on sample_datalinks4
create table my_table(link datalink);
update datalink.columns set integrity='SELECTIVE' where table_name='my_table';
NOTICE:  DATALINK DDL:TRIGGER on my_table
create table my_table2(link datalink);
update datalink.columns set integrity='ALL' where table_name='my_table2';
NOTICE:  DATALINK DDL:TRIGGER on my_table2
create table my_table3(link datalink);
update datalink.columns set integrity='ALL',write_access='BLOCKED' where table_name='my_table3';
NOTICE:  DATALINK DDL:TRIGGER on my_table3
create table my_table4(link datalink);
update datalink.columns set integrity='ALL',write_access='BLOCKED',read_access='DB',recovery='YES',on_unlink='DELETE' where table_name='my_table4';
NOTICE:  DATALINK DDL:TRIGGER on my_table4
select * from datalink.columns order by table_name;
        table_name         | column_name | link_control | integrity | read_access | write_access | recovery | on_unlink 
---------------------------+-------------+--------------+-----------+-------------+--------------+----------+-----------
 datalink.sample_datalinks | link        | FILE         | SELECTIVE | FS          | FS           | NO       | NONE
 dl_directory              | dirlink     | FILE         | ALL       | FS          | FS           | NO       | NONE
 efiles0                   | file        | NO           | NONE      | FS          | FS           | NO       | NONE
 efiles1                   | file        | FILE         | SELECTIVE | FS          | FS           | NO       | NONE
 efiles2                   | file        | FILE         | ALL       | FS          | FS           | NO       | NONE
 my_table                  | link        | FILE         | SELECTIVE | FS          | FS           | NO       | NONE
 my_table2                 | link        | FILE         | ALL       | FS          | FS           | NO       | NONE
 my_table3                 | link        | FILE         | ALL       | FS          | BLOCKED      | NO       | RESTORE
 my_table4                 | link        | FILE         | ALL       | DB          | BLOCKED      | YES      | DELETE
 sample_datalinks          | link        | NO           | NONE      | FS          | FS           | NO       | NONE
 sample_datalinks2         | link        | FILE         | SELECTIVE | FS          | FS           | NO       | NONE
 sample_datalinks3         | link        | NO           | NONE      | FS          | FS           | NO       | NONE
 sample_datalinks4         | link        | NO           | NONE      | FS          | FS           | NO       | NONE
(13 rows)

insert into my_table4 values (dlvalue('/var/www/datalink/test4.txt'));
WARNING:  DATALINK WARNING - datalinker required
HINT:  make sure pg_datalinker process is running to finalize your commits
ERROR:  DATALINK EXCEPTION - DELETE permission denied on directory
URL:  file:///var/www/datalink/test4.txt
DETAIL:  delete permission is required on directory
HINT:  add appropriate entry in table datalink.access
CONTEXT:  PL/pgSQL function dl_datalink_ref(datalink,dl_lco,regclass,name) line 62 at RAISE
PL/pgSQL function dl_trigger_table() line 94 at assignment
insert into my_table4 values (dlvalue('/etc/issue')); 
WARNING:  DATALINK WARNING - datalinker required
HINT:  make sure pg_datalinker process is running to finalize your commits
ERROR:  DATALINK EXCEPTION - DELETE permission denied on directory
URL:  file:///etc/issue
DETAIL:  delete permission is required on directory
HINT:  add appropriate entry in table datalink.access
CONTEXT:  PL/pgSQL function dl_datalink_ref(datalink,dl_lco,regclass,name) line 62 at RAISE
PL/pgSQL function dl_trigger_table() line 94 at assignment
insert into datalink.access values ('/var/www/datalink/','DELETE',current_role::regrole);
NOTICE:  DATALINK LINK:/var/www/datalink/
insert into my_table4 values (dlvalue('/var/www/datalink/test1.txt'));
WARNING:  DATALINK WARNING - datalinker required
HINT:  make sure pg_datalinker process is running to finalize your commits
NOTICE:  DATALINK LINK:/var/www/datalink/test1.txt
update datalink.columns set write_access='ADMIN',recovery='NO',on_unlink='RESTORE' where table_name='my_table4';
update datalink.columns set write_access='ADMIN',recovery='YES',on_unlink='RESTORE' where table_name='my_table4';
ERROR:  DATALINK EXCEPTION
DETAIL:  Can't change link control options; 1 non-null values present in column "link"
HINT:  Perhaps you can "truncate my_table4"
CONTEXT:  PL/pgSQL function modlco(regclass,name,dl_lco) line 48 at RAISE
SQL statement "SELECT datalink.modlco(regclass(old.table_name),old.column_name,my_lco)"
PL/pgSQL function dl_trigger_columns() line 25 at PERFORM
delete from datalink.access where dirpath='/var/www/datalink/' and privilege_type='DELETE' and grantee=current_role;
select * from datalink.columns where table_name='my_table4';
 table_name | column_name | link_control | integrity | read_access | write_access | recovery | on_unlink 
------------+-------------+--------------+-----------+-------------+--------------+----------+-----------
 my_table4  | link        | FILE         | ALL       | DB          | ADMIN        | NO       | RESTORE
(1 row)

truncate my_table4;
NOTICE:  DATALINK UNLINK:/var/www/datalink/test1.txt

\pset null _null_
\set VERBOSITY default
\set CONTEXT never
SET client_min_messages = notice;
SET search_path = public,datalink;
create table sample_datalinks2 (
  id serial,
  link datalink
);
update datalink.columns
   set link_control='FILE', integrity='SELECTIVE'
 where table_name='sample_datalinks2' and column_name='link';
NOTICE:  DATALINK DDL:TRIGGER on sample_datalinks2
select regclass,column_name,dlco.*
  from datalink.dl_columns left join datalink.link_control_options dlco using (lco);
         regclass          | column_name | lco | link_control | integrity | read_access | write_access | recovery | on_unlink 
---------------------------+-------------+-----+--------------+-----------+-------------+--------------+----------+-----------
 dl_directory              | dirlink     |   1 | FILE         | SELECTIVE | FS          | FS           | NO       | NONE
 datalink.sample_datalinks | link        |   1 | FILE         | SELECTIVE | FS          | FS           | NO       | NONE
 sample_datalinks          | link        |   0 | NO           | NONE      | FS          | FS           | NO       | NONE
 sample_datalinks2         | link        |   1 | FILE         | SELECTIVE | FS          | FS           | NO       | NONE
(4 rows)

insert into sample_datalinks2 (link)
values (dlvalue('/etc/','FS','Sample file datalink'));
insert into sample_datalinks2 (link)
values (dlvalue('file:///foo+bar/no_file','URL','Sample file datalink 2'));
ERROR:  DATALINK EXCEPTION - referenced file does not exist
URL:  file:/foo+bar/no_file
DETAIL:  CURL error 37 - Couldn't read a file:// file
HINT:  make sure URL is correct and referenced file actually exists
CONTEXT:  PL/pgSQL function dl_datalink_ref(datalink,dl_lco,regclass,name) line 47 at RAISE
PL/pgSQL function dl_trigger_table() line 94 at assignment
update datalink.columns
   set link_control='FILE', integrity='SELECTIVE'
 where table_name='sample_datalinks2' and column_name='link';
insert into sample_datalinks2 (link)
values (dlvalue('https://www.wikipedia.org/','URL','Sample HTTPS datalink'));
insert into sample_datalinks2 (link)
values (dlvalue('http://blah','URL','Broken datalink'));
ERROR:  DATALINK EXCEPTION - referenced file does not exist
URL:  http://blah
DETAIL:  CURL error 6 - Couldn't resolve host name
HINT:  make sure URL is correct and referenced file actually exists
CONTEXT:  PL/pgSQL function dl_datalink_ref(datalink,dl_lco,regclass,name) line 47 at RAISE
PL/pgSQL function dl_trigger_table() line 94 at assignment
select dlurlcomplete(link), link::jsonb->>'b' is not null as has_token from sample_datalinks2;
       dlurlcomplete        | has_token 
----------------------------+-----------
 file:/etc/                 | f
 https://www.wikipedia.org/ | f
(2 rows)

create table sample_datalinks3 as 
select *
  from sample_datalinks;
update datalink.columns
   set link_control='FILE', integrity='SELECTIVE'
 where table_name='sample_datalinks3' and column_name='link';
ERROR:  DATALINK EXCEPTION
DETAIL:  Can't change link control options; 6 non-null values present in column "link"
HINT:  Perhaps you can "truncate sample_datalinks3"
CONTEXT:  PL/pgSQL function modlco(regclass,name,dl_lco) line 48 at RAISE
SQL statement "SELECT datalink.modlco(regclass(old.table_name),old.column_name,my_lco)"
PL/pgSQL function dl_trigger_columns() line 25 at PERFORM
delete from sample_datalinks3 where dllinktype(link)='FS';
-- test domains
create domain file datalink;
create domain rfile datalink(1);
create domain efile datalink(2);
create table efiles0 ( file file );
create table efiles1 ( file rfile );
NOTICE:  DATALINK DDL:TRIGGER on efiles1
create table efiles2 ( file efile );
NOTICE:  DATALINK DDL:TRIGGER on efiles2
insert into efiles1 values (dlvalue('https://www.wikipedia.org/','URL','Sample HTTPS datalink'));
insert into efiles1 values (dlvalue('http://blahXXXX','URL','Broken datalink'));
ERROR:  DATALINK EXCEPTION - referenced file does not exist
URL:  http://blahxxxx
DETAIL:  CURL error 6 - Couldn't resolve host name
HINT:  make sure URL is correct and referenced file actually exists
CONTEXT:  PL/pgSQL function dl_datalink_ref(datalink,dl_lco,regclass,name) line 47 at RAISE
PL/pgSQL function dl_trigger_table() line 94 at assignment
